vim9script
# zR to unfold all
#{{{ basic settings
set nocompatible
set encoding=utf-8

filetype indent plugin on
syntax on
set mouse=a

set cursorline
set hidden
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum
set list
set listchars=tab:▸\ ,trail:·
set showcmd
set incsearch
set hlsearch
set ignorecase
set smartcase
set backspace=indent,eol,start
set autoindent
set nostartofline
set noerrorbells visualbell t_vb=
set number
set relativenumber

set shiftwidth=4
set softtabstop=4
set expandtab
set scrolloff=8
set splitright
set splitbelow

set clipboard=unnamed
set foldmethod=marker

nnoremap <space> <nop>
g:mapleader = ' '
#}}}

#{{{ vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
plug#begin('~/.vim/plugged')
Plug 'sheerun/vim-polyglot'
Plug 'morhetz/gruvbox'
Plug 'ghifarit53/tokyonight-vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ryanoasis/vim-devicons'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/gv.vim'
Plug 'stsewd/fzf-checkout.vim'
Plug 'airblade/vim-rooter'
Plug 'mbbill/undotree'
Plug 'dbeniamine/cheat.sh-vim'
Plug 'voldikss/vim-floaterm'
Plug 'mhinz/vim-startify'
Plug 'chrisbra/Colorizer'
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }
Plug 'vim-utils/vim-man'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'honza/vim-snippets'
plug#end()
#}}}

#{{{ colorscheme
# colorscheme gruvbox
# set background=dark
# hi Normal guibg=NONE ctermbg=NONE

set termguicolors
g:tokyonight_style = 'storm' # available: night, storm
g:tokyonight_enable_italic = 1
g:tokyonight_current_word = 'italic'
colorscheme tokyonight
#}}}

#{{{ vim-airline
# g:airline_theme = 'bubblegum'
g:airline_theme = 'tokyonight'
g:airline_powerline_fonts = 1
g:airline_skip_empty_sections = 1
if !exists('g:airline_symbols')
    g:airline_symbols = {}
endif
# unicode symbols
g:airline_left_sep = '»'
g:airline_left_sep = '▶'
g:airline_right_sep = '«'
g:airline_right_sep = '◀'
g:airline_symbols.linenr = '␊'
g:airline_symbols.linenr = '␤'
g:airline_symbols.linenr = '¶'
g:airline_symbols.branch = '⎇'
g:airline_symbols.paste = 'ρ'
g:airline_symbols.paste = 'Þ'
g:airline_symbols.paste = '∥'
g:airline_symbols.whitespace = 'Ξ'
# airline symbols
g:airline_left_sep = ''
g:airline_left_alt_sep = ''
g:airline_right_sep = ''
g:airline_right_alt_sep = ''
g:airline_symbols.branch = ''
g:airline_symbols.readonly = ''
g:airline_symbols.linenr = ''
g:airline#extensions#tabline#enabled = 1
g:airline#extensions#tabline#buffer_nr_show = 1
#}}}

#{{{ other plugins settings

g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
g:is_posix = 1
g:fugitive_gitlab_domains = {'ssh://git.ci.motional.com': 'https://gitlab.ci.motional.com'}

# netrw
g:netrw_banner = 0
g:netrw_liststyle = 3
g:netrw_sort_sequence = '[\/]$,*'
g:netrw_browse_split = 4

# NERDTree
g:NERDTreeMinimalUI = 1
g:NERDTreeShowHidden = 1

# Floaterm
g:floaterm_keymap_new    = '<F7>'
g:floaterm_keymap_prev   = '<F8>'
g:floaterm_keymap_next   = '<F9>'
g:floaterm_keymap_toggle = '<F12>'
g:floaterm_autoclose = 1

g:startify_bookmarks = [
    { 'v': '~/.vim/vimrc' },
    { 't': '~/.config/tmux/tmux.conf' },
    { 'z': '~/.zshrc' },
    { 'w': '~/vimwiki/index.md' },
    '~/repo/personal',
    ]

g:startify_lists = [
    { 'header': ['   Bookmarks'],      'type': 'bookmarks' },
    { 'header': ['   MRU'],            'type': 'files' },
    { 'header': ['   MRU ' .. getcwd()], 'type': 'dir' },
    ]
g:startify_files_number = 4
nnoremap <silent> <leader> :WhichKey '<Space>'<cr>
#}}}

#{{{ key mappings
# Quicker window movement
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l
nnoremap <leader>wf :w!<cr>
nnoremap <leader>q :bd<cr>
nnoremap <leader>wq :wq<cr>
# Vertical and horizontal splits
nnoremap <leader>vs <C-w>v
nnoremap <leader>xs <C-w>S
nnoremap <silent> <leader>+ :vertical resize +5<cr>
nnoremap <silent> <leader>- :vertical resize -5<cr>
nnoremap <S-l> :bnext<cr>
nnoremap <S-h> :bprevious<cr>
nnoremap <leader>u :bprevious<cr>
nnoremap <leader>ve :edit ~/.vim/vimrc<cr>
tnoremap <leader><esc> <C-\><C-n>
# Keep it centered
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z
vnoremap < <gv
vnoremap > >gv
vnoremap p "_dP
vnoremap y myy`y
vnoremap <leader>y myy`y:call system("wl-copy -n", @")<cr>
vnoremap Y myY`y
nnoremap Y y$
nnoremap <leader>p :let @"=system("wl-paste -n")<cr>""P
nnoremap <leader>xo :!xdg-open %<cr><cr>
nnoremap <C-a> <esc>ggVG
imap jk <esc>
nmap <silent> gf :edit <cfile><cr>
nmap <leader>Q :FloatermKill!<cr>:bufdo bdelete<cr>:qa<cr>
imap <F3> <esc>:w<cr>:FloatermNew --autoclose=0 --position=bottom --height=0.4 --width=0.9 compile-and-run %<cr>
nmap <F3> <esc>:w<cr>:FloatermNew --autoclose=0 --position=bottom --height=0.4 --width=0.9 compile-and-run %<cr>
nnoremap <leader>nt :NERDTreeToggle %<cr>
nmap <silent> <leader><cr> :noh<cr>
nnoremap <leader>f :GFiles<cr>
nnoremap <leader>F :Files<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>l :BLines<cr>
nnoremap <leader>rg :Rg<cr>
nnoremap <leader>gb :GBranches<cr>
nmap <F2> :Maps<cr>
cnoremap w!! w !sudo tee > /dev/null %
# vim-repeat
silent! repeat#set("\<Plug>MyWonderfulMap", v:count)
#}}}

#{{{ coc.vim settings
set nobackup
set nowritebackup
set updatetime=300
set signcolumn=yes

inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"
inoremap <silent><expr> <c-@> coc#refresh()
inoremap <expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<cr>"

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call CocActionAsync('doHover')<cr>
autocmd CursorHold * silent call CocActionAsync('highlight')
nmap <leader>rn <Plug>(coc-rename)
#}}}
